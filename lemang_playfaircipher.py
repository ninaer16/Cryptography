# -*- coding: utf-8 -*-
"""Lemang_PlayfairCipher.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JJEVMwMABCQvYeo_WEwUsV_cYvq0emUI
"""

# ===== PLAYFAIR ENCRYPTION =====
def generate_matrix(key):
    key = key.upper().replace('J', 'I')
    key = ''.join(sorted(set(key), key=key.index))
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    matrix = []
    for char in key + alphabet:
        if char not in matrix:
            matrix.append(char)
    return [matrix[i:i+5] for i in range(0, 25, 5)]

def find_position(matrix, char):
    for row in range(5):
        for col in range(5):
            if matrix[row][col] == char:
                return row, col
    return None, None

def prepare_text(text):
    text = text.upper().replace('J', 'I')
    text = ''.join(filter(str.isalpha, text))
    processed = []
    i = 0
    while i < len(text):
        a = text[i]
        b = text[i+1] if i+1 < len(text) else 'X'
        if a == b:
            processed.append(a + 'X')
            i += 1
        else:
            processed.append(a + b)
            i += 2
    return ''.join(processed)

def playfair_encrypt(plaintext, key):
    matrix = generate_matrix(key)
    text = prepare_text(plaintext)
    ciphertext = []

    for i in range(0, len(text), 2):
        a, b = text[i], text[i+1]
        row1, col1 = find_position(matrix, a)
        row2, col2 = find_position(matrix, b)

        if row1 == row2:
            ciphertext.append(matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5])
        elif col1 == col2:
            ciphertext.append(matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2])
        else:
            ciphertext.append(matrix[row1][col2] + matrix[row2][col1])

    return ''.join(ciphertext)

if __name__ == "__main__":
    print("=== Playfair Cipher Encryption ===")
    plaintext = input("Enter your plaintext: ")
    key = input("Enter encryption key: ").strip()

    encrypted = playfair_encrypt(plaintext, key)
    print("\nEncrypted Result:", encrypted)